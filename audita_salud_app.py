import streamlit as st
import fitz  # PyMuPDF
import re
from datetime import datetime

# --- CONFIGURACI√ìN DE LA P√ÅGINA Y ESTILOS ---
st.set_page_config(page_title="Auditor M√©dico AI", page_icon="ü©∫", layout="wide")

# --- INYECCI√ìN DE CSS PARA MEJORAR LA UI/UX ---
# Puedes cambiar los c√≥digos de color aqu√≠ para personalizar la app.
# Por ejemplo, cambia '#2563EB' a otro color como '#D946EF' (fucsia).
st.markdown("""
<style>
    .main {
        background-color: #f5f5f5;
    }
    .card {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    .card-title {
        font-size: 1.5em;
        font-weight: bold;
        color: #2563EB; /* Azul m√°s vibrante */
        margin-bottom: 10px;
    }
    mark {
      background-color: #fde047;
      padding: 2px 4px;
      border-radius: 3px;
    }
</style>
""", unsafe_allow_html=True)


# --- SECCI√ìN DE FUNCIONES DE L√ìGICA (BACK-END) ---

# --- NUEVA FUNCI√ìN PARA FORMATEAR FECHAS EN ESPA√ëOL DE FORMA SEGURA ---
def format_date_spanish(date_obj):
    """Formatea un objeto de fecha a un string en espa√±ol, sin depender de locale."""
    if not isinstance(date_obj, datetime):
        return "Fecha inv√°lida"
    
    meses = {
        1: "enero", 2: "febrero", 3: "marzo", 4: "abril", 5: "mayo", 6: "junio",
        7: "julio", 8: "agosto", 9: "septiembre", 10: "octubre", 11: "noviembre", 12: "diciembre"
    }
    return f"{date_obj.day} de {meses[date_obj.month]} de {date_obj.year}"

# --- FUNCI√ìN MEJORADA PARA ENCONTRAR FECHA DE NACIMIENTO ---
def find_birth_date(text):
    """
    Encuentra la fecha de nacimiento, aceptando meses como texto (ej: "septiembre").
    """
    # Regex mejorada que captura n√∫meros O palabras para el mes.
    match = re.search(r"fecha\s+(de\s+)?nacimiento[\s:]*([0-9]{1,2}[/\s-]([a-zA-Z√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë]+|[0-9]{1,2})[/\s-][0-9]{2,4})", text, re.IGNORECASE)
    if not match:
        return None

    date_str = match.group(2).lower()
    
    # Mapeo para convertir mes de texto a n√∫mero.
    meses_map = {
        'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04', 'mayo': '05', 'junio': '06',
        'julio': '07', 'agosto': '08', 'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12'
    }

    for month_name, month_num in meses_map.items():
        if month_name in date_str:
            date_str = date_str.replace(month_name, month_num)
            break
    
    # Limpiar y normalizar el string de la fecha.
    date_str_clean = re.sub(r'[\s-]', '/', date_str)

    for fmt in ("%d/%m/%Y", "%d/%m/%y"):
        try:
            return datetime.strptime(date_str_clean, fmt)
        except ValueError:
            pass
    return None

def extract_text_from_pdf(pdf_file):
    """Extrae texto de un PDF, manejando errores de encriptaci√≥n o formato."""
    try:
        pdf_bytes = pdf_file.read()
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
        if doc.is_encrypted:
            st.error("‚ùå **Error: El PDF est√° protegido con contrase√±a.**")
            st.warning("Soluci√≥n: Abra el PDF, elija 'Imprimir' y gu√°rdelo como un nuevo PDF. Luego, suba ese nuevo archivo.")
            return None
        full_text = " ".join(page.get_text() for page in doc)
        if not full_text.strip():
            st.error("‚ùå **Error: El PDF no contiene texto extra√≠ble (podr√≠a ser una imagen).**")
            return None
        return full_text
    except Exception as e:
        st.error(f"‚ùå **Error inesperado al procesar el PDF:** {e}")
        return None

def calculate_age(birth_date, attention_date):
    """Calcula la edad en a√±os."""
    if not birth_date or not attention_date:
        return "N/D"
    age = attention_date.year - birth_date.year - ((attention_date.month, attention_date.day) < (birth_date.month, birth_date.day))
    return f"{age} a√±os"

def extract_attentions(text):
    """Divide el texto en bloques de atenci√≥n."""
    pattern = r"(\d{1,2}[/\s-](?:[a-zA-Z√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë]+|[0-9]{1,2})[/\s-]\d{2,4})"
    content_parts = re.split(pattern, text, flags=re.IGNORECASE)
    attentions = []
    header_info = ""
    if len(content_parts) > 1:
        header_info = content_parts[0]
        # Bucle para procesar cada par de (fecha, contenido)
        for i in range(1, len(content_parts), 2):
            date_str = content_parts[i]
            content = content_parts[i+1]
            attention_date = find_birth_date(f"Fecha Nacimiento: {date_str}") # Reutilizamos la l√≥gica de find_birth_date para parsear fechas
            if attention_date and len(content.strip()) > 50:
                companion_match = re.search(r"(acompa√±ad[oa]\s+por|en\s+compa√±√≠a\s+de)\s+([^,.\n]+)", content, re.IGNORECASE)
                companion = companion_match.group(2).strip() if companion_match else "No especificado"
                attentions.append({"fecha_atencion": attention_date, "contenido": content.strip(), "acompanante": companion})
    return attentions, header_info

# --- SECCI√ìN DE INTERFAZ DE USUARIO (FRONT-END) ---
with st.sidebar:
    st.title("ü©∫ Auditor M√©dico AI")
    st.markdown("---")
    st.markdown("### üìÑ Instrucciones")
    st.info("1. **Sube** la historia cl√≠nica en PDF.\n2. **Explora** las pesta√±as para ver el resumen, la auditor√≠a y el texto completo.\n3. **Utiliza** la b√∫squeda para encontrar t√©rminos espec√≠ficos.")
    st.markdown("---")
    st.success("Prototipo funcional. La precisi√≥n depende de la calidad del PDF.")

st.title("Panel de Auditor√≠a de Historias Cl√≠nicas")
st.markdown("### Sube un archivo PDF para analizarlo seg√∫n la normativa colombiana y obtener un resumen ejecutivo.")

uploaded_file = st.file_uploader("Arrastra y suelta el archivo PDF aqu√≠", type=["pdf"], label_visibility="collapsed")

if not uploaded_file:
    st.info("Esperando un archivo de historia cl√≠nica para comenzar el an√°lisis...")
else:
    full_text = extract_text_from_pdf(uploaded_file)
    if full_text:
        st.success("‚úÖ ¬°An√°lisis completado! Revisa los resultados a continuaci√≥n.")
        
        birth_date = find_birth_date(full_text)
        attentions, header_text = extract_attentions(full_text)
        
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<p class="card-title">üìÑ Resumen del Paciente</p>', unsafe_allow_html=True)
        col1, col2, col3 = st.columns(3)
        name_match = re.search(r"(?:paciente|nombre)[\s:]*([A-Z√Å√â√ç√ì√ö√ë\s]{10,})", header_text, re.IGNORECASE)
        patient_name = name_match.group(1).strip().title() if name_match and name_match.group(1) else "No encontrado"
        col1.metric("Paciente", patient_name)
        col2.metric("Fecha de Nacimiento", format_date_spanish(birth_date) if birth_date else "No encontrada")
        col3.metric("Atenciones Identificadas", len(attentions))
        st.markdown('</div>', unsafe_allow_html=True)

        tab1, tab2, tab3 = st.tabs(["üìä Resumen de Atenciones", "‚úÖ Auditor√≠a de Campos", "üîç B√∫squeda y Texto Completo"])

        with tab1:
            st.header("Cronolog√≠a de Atenciones")
            if not attentions:
                st.warning("No se pudieron identificar atenciones individuales en el documento.")
            else:
                sorted_attentions = sorted(attentions, key=lambda x: x['fecha_atencion'], reverse=True)
                for i, att in enumerate(sorted_attentions):
                    age_at_attention = calculate_age(birth_date, att['fecha_atencion'])
                    with st.expander(f"**{format_date_spanish(att['fecha_atencion'])}** - Edad del paciente: **{age_at_attention}**", expanded=(i==0)):
                        st.markdown(f"**Acompa√±ante:** `{att['acompanante']}`")
                        motivo = re.search(r"motivo de consulta:?(.+?)(?:\n[A-Z√Å√â√ç√ì√ö√ë\s]{2,}:|$)", att['contenido'], re.IGNORECASE | re.DOTALL)
                        diagnostico = re.search(r"diagn[o√≥]stico:?(.+?)(?:\n[A-Z√Å√â√ç√ì√ö√ë\s]{2,}:|$)", att['contenido'], re.IGNORECASE | re.DOTALL)
                        st.info(f"**Motivo de Consulta:** {motivo.group(1).strip() if motivo else 'No especificado'}")
                        st.success(f"**Diagn√≥stico/Plan:** {diagnostico.group(1).strip() if diagnostico else 'No especificado'}")
                        if st.checkbox("Mostrar texto completo de esta atenci√≥n", key=f"cb_{i}"):
                            st.text_area("Contenido:", att['contenido'], height=200, disabled=True, key=f"att_content_{i}")

        with tab2:
            st.header("Auditor√≠a de Campos Obligatorios")
            campos_clave = {"Identificaci√≥n": ["identificacion", "documento"], "Motivo de Consulta": ["motivo de consulta"], "Enfermedad Actual": ["enfermedad actual"], "Antecedentes": ["antecedentes"], "Examen F√≠sico": ["examen fisico", "examen f√≠sico"], "Diagn√≥stico": ["diagnostico", "dx"], "Plan de Manejo": ["plan de manejo"], "Firma del Profesional": ["firma", "dr\.", "dra\."]}
            lower_text = full_text.lower()
            for campo, keywords in campos_clave.items():
                st.markdown(f"- **{campo}:** {'‚úîÔ∏è Encontrado' if any(kw in lower_text for kw in keywords) else '‚ùå No Encontrado'}")
            st.caption("Nota: Esta es una verificaci√≥n de palabras clave, no una validaci√≥n sem√°ntica.")

        with tab3:
            st.header("Explorador de Texto Completo")
            palabra_clave = st.text_input("Ingresa una palabra o frase para resaltar en el texto")
            highlighted_text = full_text.replace('\n', '<br>')
            if palabra_clave:
                highlighted_text = re.sub(f"({re.escape(palabra_clave)})", r"<mark>\1</mark>", highlighted_text, flags=re.IGNORECASE)
            st.markdown(f'<div style="height:600px;overflow-y:scroll;border:1px solid #ddd;padding:15px;border-radius:5px;background-color:white;">{highlighted_text}</div>', unsafe_allow_html=True)
