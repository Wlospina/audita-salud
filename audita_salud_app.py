import streamlit as st
import fitz  # PyMuPDF

st.set_page_config(page_title="Auditor M√©dico", page_icon="ü©∫", layout="centered")

st.title("ü©∫ Auditor M√©dico de Historias Cl√≠nicas (Colombia)")
st.write("Sube un archivo PDF con la historia cl√≠nica y el sistema verificar√° el cumplimiento de normativas.")

uploaded_file = st.file_uploader("üìÑ Sube el archivo PDF de la historia cl√≠nica", type=["pdf"])

if uploaded_file:
    with st.spinner("üîç Leyendo el contenido del PDF..."):
        # Leer PDF con PyMuPDF
        doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
        full_text = ""
        for page in doc:
            full_text += page.get_text()

        if full_text.strip():
                    # Palabras clave m√≠nimas para verificar cumplimiento b√°sico
            
            palabras_clave = ["motivo de consulta", "antecedentes", "plan de manejo", "firma", "evoluci√≥n", "examen f√≠sico"]
            faltantes = [palabra for palabra in palabras_clave if palabra.lower() not in full_text.lower()]

            st.markdown("### Resultado de la auditor√≠a:")
            st.info(f"Campos verificados: {len(palabras_clave)} | Campos faltantes: {len(faltantes)}")

            if not faltantes:
                st.success("La historia cl√≠nica contiene todos los campos clave requeridos.")
            else:
                st.error(" Faltan los siguientes campos clave:")
                for palabra in faltantes:
                    st.markdown(f"- {palabra}")

            st.subheader("üìñ Texto extra√≠do del PDF:")
            st.text_area("Contenido extra√≠do:", full_text, height=400)
       
        # A√±adido c√≥digo para leer y mostrar texto de PDFs
from transformers import pipeline

# Cargar modelo de resumen (solo se hace una vez)
resumidor = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")

# Generar resumen
if len(full_text) > 100:  # evita errores con textos muy cortos
    resumen = resumidor(full_text[:1000], max_length=130, min_length=30, do_sample=False)[0]['summary_text']
    st.subheader("üß† Resumen autom√°tico del contenido cl√≠nico:")
    st.info(resumen)
import streamlit as st
import fitz  # PyMuPDF
from transformers import pipeline

# Configuraci√≥n de la app
st.set_page_config(page_title="Auditor M√©dico", page_icon="ü©∫", layout="centered")
st.title("ü©∫ Auditor M√©dico de Historias Cl√≠nicas (Colombia)")
st.write("Sube un archivo PDF con la historia cl√≠nica y el sistema verificar√° el cumplimiento de normativas.")

# Subir archivo
uploaded_file = st.file_uploader("üìÑ Sube el archivo PDF de la historia cl√≠nica", type=["pdf"])

if uploaded_file:
    with st.spinner("‚è≥ Leyendo el contenido del PDF..."):
        try:
            # Leer PDF con PyMuPDF
            doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
            full_text = ""
            for page in doc:
                full_text += page.get_text()

            if full_text.strip():
                # Palabras clave m√≠nimas para cumplimiento b√°sico
                palabras_clave = ["motivo de consulta", "antecedentes", "plan de manejo", "firma", "evoluci√≥n", "examen f√≠sico"]
                faltantes = [p for p in palabras_clave if p.lower() not in full_text.lower()]

                st.markdown("### ‚úÖ Resultado de la auditor√≠a:")
                st.info(f"Campos verificados: {len(palabras_clave)} | Campos faltantes: {len(faltantes)}")

                if not faltantes:
                    st.success("‚úÖ La historia cl√≠nica contiene todos los campos clave requeridos.")
                else:
                    st.error("‚ùå Faltan los siguientes campos clave:")
                    for palabra in faltantes:
                        st.markdown(f"- {palabra}")

                # Mostrar texto extra√≠do
                st.subheader("üìÉ Texto extra√≠do del PDF:")
                st.text_area("Contenido extra√≠do:", full_text, height=300)

                # Resumen autom√°tico del texto
                if len(full_text) > 100:
                    resumen_modelo = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")
                    resumen = resumen_modelo(full_text[:1000], max_length=130, min_length=30, do_sample=False)[0]['summary_text']
                    st.subheader("ü§ñ Resumen autom√°tico del contenido cl√≠nico:")
                    st.info(resumen)

                # Evaluaci√≥n b√°sica de redacci√≥n
                st.subheader("Evaluaci√≥n de redacci√≥n cl√≠nica:")
                if len(full_text.split()) > 300:
                    st.success("Redacci√≥n adecuada: el texto es suficientemente largo y detallado.")
                else:
                    st.warning("Redacci√≥n mejorable: el texto cl√≠nico parece demasiado corto o resumido.")

                # Validaci√≥n de algunos elementos normativos de la Resoluci√≥n 1995
                st.subheader("üìë Validaci√≥n b√°sica con Resoluci√≥n 1995 de 1999:")
                criterios = {
                    "Nombre del paciente": "nombre",
                    "Identificaci√≥n": "c√©dula",
                    "Firma del profesional": "firma",
                    "Fecha de atenci√≥n": "fecha",
                    "Diagn√≥stico": "diagn√≥stico"
                }
                criterios_faltantes = [campo for campo, palabra in criterios.items() if palabra.lower() not in full_text.lower()]
                if not criterios_faltantes:
                    st.success("Cumple con los criterios normativos b√°sicos.")
                else:
                    st.error("Faltan estos criterios normativos:")
                    for campo in criterios_faltantes:
                        st.markdown(f"- {campo}")
            else:
                st.warning("‚ö†No se pudo extraer texto del PDF. Verifica que no sea una imagen escaneada.")

        except Exception as e:
            st.error(f"Error procesando el archivo: {e}")




