import streamlit as st
import fitz  # PyMuPDF
from transformers import pipeline
from markupsafe import Markup
st.set_page_config(page_title="Auditor M√©dico", page_icon="ü©∫", layout="centered")
st.title("Auditor M√©dico de Historias Cl√≠nicas (Colombia)")
st.write("Sube un archivo PDF con la historia cl√≠nica y el sistema verificar√° el cumplimiento de normativas.")

st.markdown("Este sistema te permite verificar autom√°ticamente si una historia cl√≠nica cumple con los requerimientos m√≠nimos establecidos por la normatividad colombiana (Resoluci√≥n 1995 de 1999).")
st.markdown("#### ¬øQu√© debe contener una historia cl√≠nica?")
st.markdown("""
- Motivo de consulta  
- Antecedentes  
- Examen f√≠sico  
- Evoluci√≥n  
- Plan de manejo 
- nombre
- Edad
- Firma del profesional  
""")

uploaded_file = st.file_uploader(" Sube el archivo PDF de la historia cl√≠nica", type=["pdf"])

if uploaded_file:
    with st.spinner(" Leyendo el contenido del PDF..."):
        doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
        full_text = ""
        for page in doc:
            full_text += page.get_text()

# Funciones auxiliares
    if full_text.strip():
        st.markdown("###  Verificaci√≥n de campos obligatorios")
        campos_clave = ["motivo de consulta", "antecedentes", "examen f√≠sico", "evoluci√≥n", "plan de manejo", "firma", "nombre", "edad"]
        faltantes = [c for c in campos_clave if c.lower() not in full_text.lower()]

        if not faltantes:
            st.success(" La historia cl√≠nica contiene todos los campos clave requeridos.")
        else:
            st.warning(" Faltan los siguientes campos clave:")
            for f in faltantes:
                st.markdown(f"- {f}")

        st.markdown("### üîç Buscar una palabra o frase dentro del texto")
        palabra_clave = st.text_input("Escribe una palabra o frase:")

        if palabra_clave:
            resultados = []
            lineas = full_text.split('\n')
            for idx, linea in enumerate(lineas):
                if palabra_clave.lower() in linea.lower():
                    linea_resaltada = linea.replace(
                        palabra_clave,
                        f"<span style='background-color:yellow'><b>{palabra_clave}</b></span>"
                    )
                    resultados.append((f"match-{idx}", linea_resaltada))

            if resultados:
                st.success(f" Se encontraron {len(resultados)} coincidencias:")
                for anchor_id, linea_html in resultados:
                    st.markdown(f"- [Ir a coincidencia](#{anchor_id})", unsafe_allow_html=True)
                    st.markdown(f"<div id='{anchor_id}'>{linea_html}</div>", unsafe_allow_html=True)
            else:
                st.info(" No se encontraron coincidencias.")

        st.markdown("### Periodicidad de Atenci√≥n M√©dica")
        fechas = extraer_fechas(full_text)
        if fechas:
            st.markdown(f"- Fechas encontradas: {', '.join(fechas)}")
            promedio = calcular_periodicidad(fechas)
            if promedio:
                st.markdown(f"- En promedio, el paciente es atendido cada **{promedio} d√≠as**.")
        else:
            st.info("No se encontraron fechas en el documento.")

        st.markdown("###  √ìrdenes M√©dicas o Ex√°menes Solicitados")
        ordenes = extraer_ordenes(full_text)
        if ordenes:
            for o in ordenes:
                st.markdown(f"-  {o}")
        else:
            st.info("No se encontraron √≥rdenes m√©dicas expl√≠citas en el texto.")

def extraer_fechas(texto):
    patrones_fecha = [r'\d{2}/\d{2}/\d{4}', r'\d{4}-\d{2}-\d{2}']
    fechas = []
    for patron in patrones_fecha:
        fechas.extend(re.findall(patron, texto))
    fechas_unicas = sorted(set(fechas), key=lambda d: datetime.strptime(d, "%d/%m/%Y") if "/" in d else datetime.strptime(d, "%Y-%m-%d"))
    return fechas_unicas

def calcular_periodicidad(fechas):
    if len(fechas) < 2:
        return None
    fechas_dt = [datetime.strptime(f, "%d/%m/%Y") if "/" in f else datetime.strptime(f, "%Y-%m-%d") for f in fechas]
    diferencias = [(fechas_dt[i] - fechas_dt[i-1]).days for i in range(1, len(fechas_dt))]
    return round(sum(diferencias) / len(diferencias), 1)

def extraer_ordenes(texto):
    ordenes = re.findall(r'(Se (ordena|solicita|env√≠a)[^.\n]*)', texto, re.IGNORECASE)
    return [o[0].strip() for o in ordenes]

    if full_text.strip():
        # Palabras clave m√≠nimas para verificar cumplimiento b√°sico
        palabras_clave = ["motivo de consulta", "antecedentes", "plan de manejo", "firma", "evoluci√≥n", "examen f√≠sico"]
        faltantes = [palabra for palabra in palabras_clave if palabra.lower() not in full_text.lower()]

        st.markdown("###  Resultado de la auditor√≠a:")
        st.info(f"Campos verificados: {len(palabras_clave)} | Campos faltantes: {len(faltantes)}")

        if not faltantes:
            st.success("La historia cl√≠nica contiene todos los campos clave requeridos.")
        else:
            st.error(" Faltan los siguientes campos clave:")
            for palabra in faltantes:
                st.markdown(f"- {palabra}")

        st.subheader("Texto extra√≠do del PDF:")
        st.text_area("Contenido extra√≠do:", full_text, height=400)
        # Filtro de b√∫squeda por palabra clave
# Filtro de b√∫squeda por palabra clave
# NUEVO BLOQUE: auditor√≠a mejorada y resaltado
st.markdown("### Buscar palabra clave en el texto")
palabra_clave = st.text_input("Ingresa una palabra o frase para buscar")

if palabra_clave:
    resultados = []
    for idx, linea in enumerate(full_text.split('\n')):
        if palabra_clave.lower() in linea.lower():
            linea_resaltada = linea.replace(
              palabra_clave,
               Markup(f"<span style='background-color:yellow'><b>{palabra_clave}</b></span>")
        )
        resultados.append((f"match-{idx}", linea_resaltada))


    if resultados:
        st.success(f" Se encontraron {len(resultados)} coincidencias:")
        for anchor_id, res in resultados:
           st.markdown(f"- [Ir a coincidencia](#{anchor_id})", unsafe_allow_html=True)
           st.markdown(f"<div id='{anchor_id}'>{res}</div>", unsafe_allow_html=True)

    else:
        st.warning(" No se encontraron coincidencias.")

# AUDITOR√çA AUTOM√ÅTICA
st.markdown("---")
st.markdown("### Campos Faltantes o Inconsistencias")

palabras_clave = [
    "motivo de consulta", "antecedentes", "plan de manejo",
    "firma", "evoluci√≥n", "examen f√≠sico", "nombre", "edad"
]
faltantes = [palabra for palabra in palabras_clave if palabra.lower() not in full_text.lower()]

if not faltantes:
    st.success(" La historia cl√≠nica contiene todos los campos clave requeridos.")
else:
    st.error(" Faltan los siguientes campos clave seg√∫n la norma:")
    for campo in faltantes:
        st.markdown(f"- {campo}")
st.markdown("### Buscar palabra clave en el texto")

# Input para palabra clave
palabra_clave = st.text_input("Ingresa una palabra o frase para buscar")

# Mostrar resultados si hay palabra clave ingresada
if palabra_clave:
    resultados = []
    for idx, linea in enumerate(full_text.split('\n')):

        if palabra_clave.lower() in linea.lower():
            # Resalta la palabra encontrada con Markdown (negrilla azul)
            linea_resaltada = linea.replace(
                palabra_clave,
                f"**:blue[{palabra_clave}]**"
            )
            resultados.append((f"match-{idx}", linea_resaltada))


    if resultados:
        st.success(f" Se encontraron {len(resultados)} coincidencias:")
        for res in resultados:
            st.markdown(f"- {res}", unsafe_allow_html=True)
    else:
        st.warning("‚ö† No se encontraron coincidencias.")



        #  Generar resumen autom√°tico con IA (modelo liviano)
        resumidor = pipeline("summarization", model="knkarthick/MEETING_SUMMARY")
        if len(full_text) > 100:
            resumen = resumidor(full_text[:1000])[0]['summary_text']
            st.subheader("Resumen autom√°tico del contenido cl√≠nico:")
            st.info(resumen)
        else:
            st.warning(" No se pudo extraer texto del PDF. Verifica que no sea un escaneo o imagen.")
